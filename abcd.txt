# fraud/entrypoints/training.py
import argparse
from kfp.dsl import OutputPath
from fraud.training import run as run_training_logic


# fraud/training.py
from google.cloud import bigquery
import logging

logging.basicConfig(level=logging.INFO)

def run(project_id: str, source_table_id: str, model_type: str) -> str:
    """Trains a BQML model and returns its full ID."""
    client = bigquery.Client(project=project_id)
    dataset_id = source_table_id.split('.')[1]
    model_id = f"{project_id}.{dataset_id}.fraud_model_{model_type}"

    logging.info(f"Starting training for model {model_id} from table {source_table_id}")
    
    sql = f"""
    CREATE OR REPLACE MODEL `{model_id}`
    OPTIONS(
        MODEL_TYPE='{model_type}',
        INPUT_LABEL_COLS=['Class'],
        AUTO_CLASS_WEIGHTS=TRUE
    ) AS
    SELECT
      * EXCEPT(Time)
    FROM
      `{source_table_id}`
    """

    job = client.query(sql)
    job.result()

    logging.info(f"Training completed. Model created: {model_id}")
    return model_id


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--project-id', type=str, required=True)
    parser.add_argument('--source-table-id', type=str, required=True)
    parser.add_argument('--model-type', type=str, required=True)
    parser.add_argument('--model-id-path', type=OutputPath(str))
    args = parser.parse_args()

    model_id = run_training_logic(
        project_id=args.project_id,
        source_table_id=args.source_table_id,
        model_type=args.model_type
    )

    with open(args.model_id_path, 'w') as f:
        f.write(model_id)
