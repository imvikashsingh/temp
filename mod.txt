from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import joblib

# Load dataset
data = load_iris()
X = data.data
y = data.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a model (Random Forest Classifier in this case)
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Save the model to a file using joblib
joblib.dump(model, 'iris_model.joblib')

print("Model saved to iris_model.joblib")



import joblib

# Load the model from the file
loaded_model = joblib.load('iris_model.joblib')

# Use the loaded model to make predictions
predictions = loaded_model.predict(X_test)

# Print the predictions
print("Predictions:", predictions)





import pickle

try:
    with open("model.bst", "rb") as f:
        loaded_model = pickle.load(f)
        print("Model loaded successfully!")
        print(f"Type of loaded object: {type(loaded_model)}")
        # Now you can try to inspect the 'loaded_model' object.
        # The structure and contents will depend on how the model was serialized.
        # For example, if it was a scikit-learn model trained in BigQuery ML,
        # 'loaded_model' might be a scikit-learn model object.
        print(f"First few keys/elements (if applicable): {list(loaded_model.__dict__.keys())[:5] if hasattr(loaded_model, '__dict__') else str(loaded_model)[:100]}")

except FileNotFoundError:
    print(f"Error: The file 'model.bst' was not found.")
except Exception as e:
    print(f"An error occurred during unpickling: {e}")

